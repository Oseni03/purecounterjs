{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/purecounter_vanilla.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","registerEventListeners","elements","document","querySelectorAll","window","IntersectionObserverEntry","intersectObserver","IntersectionObserver","animateElements","forEach","element","observe","addEventListener","animateLegacy","e","parseConfig","legacy","elementIsInView","observer","elm","target","elementConfig","duration","innerHTML","formatNumber","end","intersectionRatio","start","setTimeout","config","incrementsPerStep","delay","countMode","currentCount","parseValue","once","setAttribute","counterWorker","setInterval","nextNum","number","steps","parseFloat","nextNumber","clearInterval","startCounter","configValues","filter","attributes","attr","test","replace","toLowerCase","parseInt","assign","decimals","currency","currencysymbol","separator","separatorsymbol","strConfig","minimumFractionDigits","maximumFractionDigits","RegExp","applySeparator","symbol","limit","Math","abs","Number","toFixed","convertToCurrencySystem","toLocaleString","undefined","data","top","offsetTop","left","offsetLeft","width","offsetWidth","height","offsetHeight","offsetParent","pageYOffset","pageXOffset","innerHeight","innerWidth"],"mappings":"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","file":"/dist/purecounter_vanilla.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/** Initial function */\nfunction registerEventListeners() {\n    /** Get all elements with class 'purecounter' */\n    var elements = document.querySelectorAll('.purecounter');\n    /** Get browser Intersection Listener Support */\n    var intersectionSupported = intersectionListenerSupported();\n\n    /** Run animateElements base on Intersection Support */\n    if (intersectionSupported) {\n        var intersectObserver = new IntersectionObserver(animateElements, {\n            \"root\": null,\n            \"rootMargin\": '20px',\n            \"threshold\": 0.5\n        });\n\n        elements.forEach(element => {intersectObserver.observe(element);})\n    } else {\n        if (window.addEventListener) {\n            animateLegacy(elements);\n\n            window.addEventListener('scroll', function(e) {\n                animateLegacy(elements);\n            }, { \"passive\": true });\n        }\n    }\n}\n\n/** This legacy to make Purecounter use very lightweight & fast */\nfunction animateLegacy(elements) {\n    elements.forEach(element => {\n        var config = parseConfig(element);\n        if(config.legacy === true && elementIsInView(element)) {\n            animateElements([element]);\n        }\n    })\n}\n\n/** Main Element Count Animation */\nfunction animateElements(elements, observer) {\n    elements.forEach(element => {\n        var elm = element.target || element; // Just make sure which element will be used\n        var elementConfig = parseConfig(elm); // Get config value on that element\n\n        // If duration is less than or equal zero, just format the 'end' value\n        if (elementConfig.duration <= 0) {\n            return elm.innerHTML = formatNumber(elementConfig.end, elementConfig);\n        }\n\n        if ((!observer && !elementIsInView(element)) || (observer && element.intersectionRatio < 0.5)) {\n            var value = elementConfig.start > elementConfig.end ? elementConfig.end : elementConfig.start;\n            return elm.innerHTML = formatNumber(value, elementConfig);\n        }\n\n        // If duration is more than 0, then start the counter\n        setTimeout(() => {\n            return startCounter(elm, elementConfig);\n        }, elementConfig.delay);\n    });\n}\n\n/** This is the the counter method */\nfunction startCounter(element, config) {\n    // First, get the increments step\n    var incrementsPerStep = (config.end - config.start) / (config.duration / config.delay);\n    // Next, set the counter mode (Increment or Decrement)\n    var countMode = 'inc';\n\n    // Set mode to 'decrement' and 'increment step' to minus if start is larger than end\n    if (config.start > config.end) {\n        countMode = 'dec';\n        incrementsPerStep *= -1;\n    }\n\n    // Next, determine the starting value\n    var currentCount = parseValue(config.start);\n    // And then print it's value to the page\n    element.innerHTML = formatNumber(currentCount, config);\n\n    // If the config 'once' is true, then set the 'duration' to 0\n    if(config.once === true){\n        element.setAttribute('data-purecounter-duration', 0);\n    }\n\n    // Now, start counting with counterWorker using Interval method based on delay\n    var counterWorker = setInterval(() => {\n        // First, determine the next value base on current value, increment value, and count mode\n        var nextNum = nextNumber(currentCount, incrementsPerStep, countMode);\n        // Next, print that value to the page\n        element.innerHTML = formatNumber(nextNum, config);\n        // Now set that value to the current value, because it's already printed\n        currentCount = nextNum;\n\n        // If the value is larger or less than the 'end' (base on mode), then  print the end value and stop the Interval\n        if ((currentCount >= config.end && countMode == 'inc') || (currentCount <= config.end && countMode == 'dec')) {\n            element.innerHTML = formatNumber(config.end, config);\n            clearInterval(counterWorker);\n        }\n    }, config.delay);\n}\n\n/** This function is to generate the element Config */\nfunction parseConfig(element) {\n    // First, we need to declare the base Config\n    // This config will be used if the element doesn't have config\n    var baseConfig = {\n        start: 0,\n        end: 9001,\n        duration: 2000,\n        delay: 10,\n        once: true,\n        decimals: 0,\n        legacy: true,\n        currency: false,\n        currencysymbol: false,\n        separator: false,\n        separatorsymbol: ','\n    };\n\n    // Next, get all 'data-precounter' attributes value. Store to array\n    var configValues = [].filter.call(element.attributes, function(attr) {\n        return /^data-purecounter-/.test(attr.name);\n    });\n\n    // Now, we create element config as an empty object\n    var elementConfig = {};\n\n    // And then, fill the element config based on config values\n    configValues.forEach(e => {\n        var name = e.name.replace('data-purecounter-', '').toLowerCase();\n        var value = name == 'duration' ? parseInt(parseValue(e.value) * 1000) : parseValue(e.value);\n        elementConfig[name] = value; // We will get an object\n    })\n\n    // Last marge base config with element config and return it as an object\n    return Object.assign(baseConfig, elementConfig);\n}\n\n/** This function is to get the next number */\nfunction nextNumber(number, steps, mode = 'inc') {\n    // First, get the exact value from the number and step (int or float)\n    number = parseValue(number);\n    steps = parseValue(steps);\n\n    // Last, get the next number based on current number, increment step, and count mode\n    // Always return it as float\n    return parseFloat(mode === 'inc' ? (number + steps) : (number - steps));\n}\n\n/** This function is to convert number into currency format */\nfunction convertToCurrencySystem (number, config) {\n    var symbol = config.currencysymbol || \"\", // Set the Currency Symbol (if any)\n        limit = config.decimals || 1,  // Set the decimal limit (default is 1)\n        number = Math.abs(Number(number)); // Get the absolute value of number\n\n    // Set the value\n    var value = number >= 1.0e+12 ? `${(number / 1.0e+12).toFixed(limit)} T` // Twelve zeros for Trillions\n        : number >= 1.0e+9 ? `${(number / 1.0e+9).toFixed(limit)} B` // Nine zeros for Billions\n        : number >= 1.0e+6 ? `${(number / 1.0e+6).toFixed(limit)} M`  // Six zeros for Millions\n        : number >= 1.0e+3 ? `${(number / 1.0e+12).toFixed(limit)} K` // Three zeros for Thousands\n        : number.toFixed(limit); // If less than 1000, print it's value\n\n    // Apply symbol before the value and return it as string\n    return symbol + value;\n}\n\n/** This function is to get the last formated number */\nfunction applySeparator(value, config){\n    // If config separator is false, delete all separator\n    if (!config.separator) {\n        return value.replace(new RegExp(/,/gi, 'gi'), '')\n    }\n\n    // If config separator is true, then create separator\n    return value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\n        .replace(new RegExp(/,/gi, 'gi'), config.separatorsymbol)\n}\n\n/** This function is to get formated number to be printed in the page */\nfunction formatNumber(number, config) {\n    // This is the configuration for 'toLocaleString' method\n    var strConfig = {minimumFractionDigits: config.decimals, maximumFractionDigits: config.decimals};\n    // Set the number if it using currency, then convert. If doesn't, just parse it as float\n    number = config.currency ? convertToCurrencySystem(number, config) : parseFloat(number);\n\n    // Last, apply the number separator using number as string\n    return applySeparator(number.toLocaleString(undefined, strConfig), config);\n}\n\n/** This function is to get the parsed value */\nfunction parseValue(data) {\n    // If number with dot (.), will be parsed as float\n    if (/^[0-9]+\\.[0-9]+$/.test(data)) {\n        return parseFloat(data);\n    }\n    // If just number, will be parsed as integer\n    if (/^[0-9]+$/.test(data)) {\n        return parseInt(data);\n    }\n    // If it's boolean string, will be parsed as boolean\n    if (/^true|false/i.test(data)) {\n        return /^true/i.test(data);\n    }\n    // Return it's value as default\n    return data;\n}\n\n// This function is to detect the element is in view or not.\nfunction elementIsInView(element) {\n    var top = element.offsetTop;\n    var left = element.offsetLeft;\n    var width = element.offsetWidth;\n    var height = element.offsetHeight;\n\n    while (element.offsetParent) {\n        element = element.offsetParent;\n        top += element.offsetTop;\n        left += element.offsetLeft;\n    }\n\n    return (\n        top >= window.pageYOffset &&\n        left >= window.pageXOffset &&\n        (top + height) <= (window.pageYOffset + window.innerHeight) &&\n        (left + width) <= (window.pageXOffset + window.innerWidth)\n    );\n}\n\n/** Just some condition to check browser Intersection Support */\nfunction intersectionListenerSupported() {\n    return ('IntersectionObserver' in window) &&\n        ('IntersectionObserverEntry' in window) &&\n        ('intersectionRatio' in window.IntersectionObserverEntry.prototype);\n}\n\n/** Run the initial function */\n(function () {\n    registerEventListeners();\n})();"],"sourceRoot":""}