{"version":3,"file":"/dist/purecounter_vanilla.js","mappings":"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","sources":["webpack://PureCounter/webpack/universalModuleDefinition","webpack://PureCounter/./js/purecounter_vanilla.js","webpack://PureCounter/webpack/bootstrap","webpack://PureCounter/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PureCounter\"] = factory();\n\telse\n\t\troot[\"PureCounter\"] = factory();\n})(self, function() {\nreturn ","/** This function is for create and merge configuration */\r\nfunction setOptions(config, baseConfig = {}){\r\n    // Create new Config object;\r\n    let newConfig = {};\r\n    // Loop config items to set it value into newConfig\r\n    for(let key in config){\r\n        // if baseConfig is set, only accept the baseconfig property\r\n        if(baseConfig != {} && !baseConfig.hasOwnProperty(key)) continue;\r\n        // let parse the config value\r\n        let val = parseValue(config[key]);\r\n        // set the newConfig property value\r\n        newConfig[key] = val;\r\n        // Exclusive for 'duration' or 'repeat' property, recheck the value\r\n        // If it's not a boolean, just set it to milisecond unit\r\n        if (key.match(/duration|repeat/)){\r\n            newConfig[key] = typeof val != 'boolean' ? val * 1000 : val;\r\n        }\r\n    }\r\n    if(baseConfig == {}) console.log(newConfig);\r\n    // Finally, we can just merge the baseConfig (if any), with newConfig.\r\n    return Object.assign({}, baseConfig, newConfig);\r\n}\r\n\r\n/** This is the the counter method */\r\nfunction startCounter(element, config) {\r\n    // Deconstruct config value and create it variable\r\n    let {start, end, duration, delay, once, repeat} = config;\r\n    // First, get the increments step\r\n    var incrementsPerStep = (end - start) / (duration / delay);\r\n    // Next, set the counter mode (Increment or Decrement)\r\n    var countMode = 'inc';\r\n\r\n    // Set mode to 'decrement' and 'increment step' to minus if start is larger than end\r\n    if (start > end) {\r\n        countMode = 'dec';\r\n        incrementsPerStep *= -1;\r\n    }\r\n\r\n    // Next, determine the starting value\r\n    var currentCount = parseValue(start);\r\n    // And then print it's value to the page\r\n    element.innerHTML = formatNumber(currentCount, config);\r\n\r\n    // If the config 'once' is true, then set the 'duration' to 0\r\n    if(once === true){\r\n        element.setAttribute('data-purecounter-duration', 0);\r\n    }\r\n\r\n    // Now, start counting with counterWorker using Interval method based on delay\r\n    var counterWorker = setInterval(() => {\r\n        // First, determine the next value base on current value, increment value, and count mode\r\n        var nextNum = nextNumber(currentCount, incrementsPerStep, countMode);\r\n        // Next, print that value to the page\r\n        element.innerHTML = formatNumber(nextNum, config);\r\n        // Now set that value to the current value, because it's already printed\r\n        currentCount = nextNum;\r\n\r\n        // If the value is larger or less than the 'end' (base on mode), then  print the end value and stop the Interval\r\n        if ((currentCount >= end && countMode == 'inc') || (currentCount <= end && countMode == 'dec')) {\r\n            element.innerHTML = formatNumber(end, config);\r\n            // If 'once' is false and 'repeat' is set\r\n            if(!once && repeat){\r\n                // First set the 'duration' to zero\r\n                element.setAttribute('data-purecounter-duration', 0);\r\n                // Next, use timeout to reset it duration back based on 'repeat' config\r\n                setTimeout(() => {\r\n                    element.setAttribute('data-purecounter-duration', (duration / 1000));\r\n                }, repeat);\r\n            }\r\n            clearInterval(counterWorker);\r\n        }\r\n    }, delay);\r\n}\r\n\r\n/** This function is to get the next number */\r\nfunction nextNumber(number, steps, mode = 'inc') {\r\n    // First, get the exact value from the number and step (int or float)\r\n    number = parseValue(number);\r\n    steps = parseValue(steps);\r\n\r\n    // Last, get the next number based on current number, increment step, and count mode\r\n    // Always return it as float\r\n    return parseFloat(mode === 'inc' ? (number + steps) : (number - steps));\r\n}\r\n\r\n/** This function is to convert number into currency format */\r\nfunction convertNumber (number, config) {\r\n    // Deconstruct config value and create it variable\r\n    var {currency, filesizing} = config;\r\n    /** Use converter if filesizing or currency is on */\r\n    if (filesizing || currency) {\r\n        number = Math.abs(Number(number)); // Get the absolute value of number\r\n\r\n        var baseNumber = 1000, // Base multiplying treshold\r\n            symbol = currency && typeof currency === 'string' ? currency : \"\", // Set the Currency Symbol (if any)\r\n            limit = config.decimals || 1, // Set the decimal limit (default is 1)\r\n            unit = ['', 'K', 'M', 'B', 'T'], // Number unit based exponent threshold\r\n            value = ''; // Define value variable\r\n\r\n        /** Changes base number and its unit for filesizing */\r\n        if (filesizing) {\r\n            baseNumber = 1024; // Use 1024 instead of 1000\r\n            unit = ['bytes', 'KB', 'MB', 'GB', 'TB']; // Change to 'bytes' unit\r\n        }\t\t\r\n\r\n        /** Get threshold value using exponent from basenumber */\r\n        var threshold = e => Math.pow(baseNumber, e);\r\n\r\n        /** Set value based on the threshold */\r\n        for(var i = 4; i >= 0; i--){\r\n            // If the exponent is 0\r\n            if(i === 0) value = `${number.toFixed(limit)} ${unit[i]}`;\r\n            // If the exponent is above zero\r\n            if(number >= threshold(i)) {\r\n                value = `${(number / threshold(i)).toFixed(limit)} ${unit[i]}`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Apply symbol before the value and return it as string\r\n        return symbol + value;\r\n    } else {\r\n        /** Return its value as float if not using filesizing or currency*/\r\n        return parseFloat(number);\r\n    }\r\n}\r\n\r\n/** This function is to get the last formated number */\r\nfunction applySeparator(value, config){\r\n    // Deconstruct config value\r\n    var {separator} = config;\r\n    // If config separator is false, delete all separator\r\n    if (!separator) {\r\n        return value.replace(new RegExp(/,/gi, 'gi'), '')\r\n    }\r\n    // Set the separator symbol.\r\n    // If 'separator' is string, than use the separator.\r\n    // If 'separator' is boolean value for 'true', just set it default to comma (,)\r\n    var symbol = typeof separator === 'string' ? separator : ',';\r\n    // If config separator is true, then create separator\r\n    return value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\r\n        .replace(new RegExp(/,/gi, 'gi'), symbol);\r\n}\r\n\r\n/** This function is to get formated number to be printed in the page */\r\nfunction formatNumber(number, config) {\r\n    var {decimals} = config;\r\n    // This is the configuration for 'toLocaleString' method\r\n    var strConfig = {minimumFractionDigits: decimals, maximumFractionDigits: decimals};\r\n    // Set and convert the number base on its config.\r\n    number = convertNumber(number, config);\r\n\r\n    // Last, apply the number separator using number as string\r\n    return applySeparator(number.toLocaleString(undefined, strConfig), config);\r\n}\r\n\r\n/** This function is to get the parsed value */\r\nfunction parseValue(data) {\r\n    // If number with dot (.), will be parsed as float\r\n    if (/^[0-9]+\\.[0-9]+$/.test(data)) {\r\n        return parseFloat(data);\r\n    }\r\n    // If just number, will be parsed as integer\r\n    if (/^[0-9]+$/.test(data)) {\r\n        return parseInt(data);\r\n    }\r\n    // If it's boolean string, will be parsed as boolean\r\n    if (/^true|false/i.test(data)) {\r\n        return /^true/i.test(data);\r\n    }\r\n    // Return it's value as default\r\n    return data;\r\n}\r\n\r\n// This function is to detect the element is in view or not.\r\nfunction elementIsInView(element) {\r\n    var top = element.offsetTop;\r\n    var left = element.offsetLeft;\r\n    var width = element.offsetWidth;\r\n    var height = element.offsetHeight;\r\n\r\n    while (element.offsetParent) {\r\n        element = element.offsetParent;\r\n        top += element.offsetTop;\r\n        left += element.offsetLeft;\r\n    }\r\n\r\n    return (\r\n        top >= window.pageYOffset &&\r\n        left >= window.pageXOffset &&\r\n        (top + height) <= (window.pageYOffset + window.innerHeight) &&\r\n        (left + width) <= (window.pageXOffset + window.innerWidth)\r\n    );\r\n}\r\n\r\n/** Just some condition to check browser Intersection Support */\r\nfunction intersectionListenerSupported() {\r\n    return ('IntersectionObserver' in window) &&\r\n        ('IntersectionObserverEntry' in window) &&\r\n        ('intersectionRatio' in window.IntersectionObserverEntry.prototype);\r\n}\r\n\r\nfunction PureCounter(options = {}){\r\n    var configs = {\r\n        start: 0, \t\t\t// Starting number [unit]\r\n        end: 100, \t\t\t// End number [unit]\r\n        duration: 2000, \t// Count duration [milisecond]\r\n        delay: 10, \t\t\t// Count delay [milisecond]\r\n        once: true, \t\t// Counting at once or recount when scroll [boolean]\r\n        repeat: false, \t\t// Repeat count for certain time [boolean|milisecond]\r\n        decimals: 0, \t\t// Decimal places [unit]\r\n        legacy: true,\r\n        filesizing: false, \t// Is it for filesize?\r\n        currency: false, \t// Is it for currency? Use it for set the symbol too [boolean|char|string]\r\n        separator: false, \t// Do you want to use thausands separator? use it for set the symbol too [boolean|char|string]\r\n        selector: '.purecounter',       // HTML query selector for spesific element\r\n    };\r\n    var configOptions = setOptions(options, configs);\r\n\r\n    function registerEventListeners() {\r\n\t\t/** Get all elements with class 'purecounter' */\r\n\t\tvar elements = document.querySelectorAll(configOptions.selector);\r\n\t\t/** Return if no elements */\r\n\t\tif (elements.length === 0) return;\r\n\r\n\t\t/** Run animateElements base on Intersection Support */\r\n\t\tif (intersectionListenerSupported()) {\r\n\t\t\tvar intersectObserver = new IntersectionObserver(animateElements.bind(this), {\r\n\t\t\t\t\"root\": null,\r\n\t\t\t\t\"rootMargin\": '20px',\r\n\t\t\t\t\"threshold\": 0.5\r\n\t\t\t});\r\n\r\n\t\t\telements.forEach(element => {intersectObserver.observe(element);})\r\n\t\t} else {\r\n\t\t\tif (window.addEventListener) {\r\n\t\t\t\tanimateLegacy(elements);\r\n\t\t\t\twindow.addEventListener('scroll', function (e) {\r\n\t\t\t\t\tanimateLegacy(elements);\r\n\t\t\t\t}, { \"passive\": true });\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n    /** This legacy to make Purecounter use very lightweight & fast */\r\n    function animateLegacy(elements) {\r\n        elements.forEach(element => {\r\n            var {legacy} = parseConfig(element);\r\n            if(legacy === true && elementIsInView(element)) {\r\n                animateElements([element]);\r\n            }\r\n        })\r\n    }\r\n\r\n    /** Main Element Count Animation */\r\n    function animateElements(elements, observer) {\r\n        elements.forEach(element => {\r\n            var elm = element.target || element; // Just make sure which element will be used\r\n            var elementConfig = parseConfig(elm); // Get config value on that element\r\n            // Deconstruct config value and create it variable\r\n            let {start, end, duration, delay} = elementConfig;\r\n            // If duration is less than or equal zero, just format the 'end' value\r\n            if (duration <= 0) {\r\n                return elm.innerHTML = formatNumber(end, elementConfig);\r\n            }\r\n\r\n            if ((!observer && !elementIsInView(element)) || (observer && element.intersectionRatio < 0.5)) {\r\n                var value = start > end ? end : start;\r\n                return elm.innerHTML = formatNumber(value, elementConfig);\r\n            }\r\n\r\n            // If duration is more than 0, then start the counter\r\n            setTimeout(() => {\r\n                return startCounter(elm, elementConfig);\r\n            }, delay);\r\n        });\r\n    }\r\n\r\n    /** This function is to generate the element Config */\r\n    function parseConfig(element) {\r\n\t\t// First, we need to declare the base Config\r\n\t\t// This config will be used if the element doesn't have config\r\n\t\tlet baseConfig = configOptions;\r\n\r\n\t\t// Next, get all 'data-precounter-*' attributes value. Store to array\r\n\t\tlet configValues = [].filter.call(element.attributes, function(attr) {\r\n\t\t\treturn /^data-purecounter-/.test(attr.name);\r\n\t\t});\r\n\r\n\t\t// Now, we create element config as an object\r\n\t\tlet elementConfig = configValues.length != 0 ? Object.assign({}, ...configValues.map(({name, value}) => {\r\n\t\t\tlet key = name.replace('data-purecounter-', '').toLowerCase(),\r\n\t\t\t\tval = parseValue(value);\r\n\r\n\t\t\treturn {[key] : val};\r\n\t\t})) : {};\r\n\r\n\t\t// Last setOptions and return\r\n\t\treturn setOptions(elementConfig, baseConfig);\r\n    }\r\n    \r\n    /** Run the initial function */\r\n    registerEventListeners();\r\n}\r\n\r\nmodule.exports = PureCounter;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(638);\n"],"names":["root","factory","exports","module","define","amd","self","setOptions","config","baseConfig","newConfig","key","hasOwnProperty","val","parseValue","match","console","log","Object","assign","startCounter","element","start","end","duration","delay","once","repeat","incrementsPerStep","countMode","currentCount","innerHTML","formatNumber","setAttribute","counterWorker","setInterval","nextNum","number","steps","mode","parseFloat","nextNumber","setTimeout","clearInterval","decimals","strConfig","minimumFractionDigits","maximumFractionDigits","value","separator","replace","RegExp","symbol","applySeparator","currency","filesizing","Math","abs","Number","baseNumber","limit","unit","threshold","e","pow","i","toFixed","convertNumber","toLocaleString","undefined","data","test","parseInt","elementIsInView","top","offsetTop","left","offsetLeft","width","offsetWidth","height","offsetHeight","offsetParent","window","pageYOffset","pageXOffset","innerHeight","innerWidth","intersectionListenerSupported","IntersectionObserverEntry","prototype","options","configs","legacy","selector","configOptions","registerEventListeners","elements","document","querySelectorAll","length","intersectObserver","IntersectionObserver","animateElements","bind","this","forEach","observe","addEventListener","animateLegacy","parseConfig","observer","elm","target","elementConfig","intersectionRatio","configValues","filter","call","attributes","attr","name","map","toLowerCase","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}